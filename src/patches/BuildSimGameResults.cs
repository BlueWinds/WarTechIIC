using System;
using System.Collections.Generic;
using System.Linq;
using Harmony;
using BattleTech;
using Localize;

namespace WarTechIIC {
    [HarmonyPatch(typeof(SimGameState), "BuildSimGameResults", new Type[] {
        typeof(SimGameEventResult[]),
        typeof(GameContext),
        typeof(SimGameStatDescDef.DescriptionTense?),
        typeof(Pilot)
    })]
    public static class SimGameState_BuildSimGameResult_Patch {

        public static void Postfix(ref List<ResultDescriptionEntry> __result, ref SimGameEventResult[] resultsList, GameContext context) {
            var results = combineResults();

            try {
                foreach (string resultText in results) {
                    __result.Add(new ResultDescriptionEntry(new Text("{1} {2}{0}", Environment.NewLine, "â€¢", resultText), context));
                }

            } catch (Exception e) {
                WIIC.modLog.Error?.Write(e);
            }

            WIIC.eventResultsCache.Clear();
        }

        public static List<string> combineResults() {
            // Break up the list generated by the raw tags into "Davion offers a contract at": ["Terra", "Wolf 395"]
            var byFactionAction = new Dictionary<string,List<string>>();
            foreach (var (factionAction, location) in WIIC.eventResultsCache) {
                if (!byFactionAction.ContainsKey(factionAction)) {
                    byFactionAction[factionAction] = new List<string>();
                }
                byFactionAction[factionAction].Add(location);
            }

            // If the same thing is happening at 4+ worlds, group them together into a single entry.
            var results = new List<string>();
            foreach (KeyValuePair<string, List<string>> factionAction in byFactionAction) {
                if (factionAction.Value.Count > 3) {
                    results.Add($"{factionAction.Key} {factionAction.Value.Count} star systems");
                } else {
                    foreach (string location in factionAction.Value) {
                        results.Add($"{factionAction.Key} {location}");
                    }
                }
            }

            return results;
        }
    }
}
